testinfo:
    summary: Bridge channel in stasis bridge with channel in non-stasis bridge.
    description: |
        "This test originates a Local channel placing half ('alice') into
        Stasis() and the other half ('echo_alice') into Echo(). The 'alice'
        half is added to the bridge 'test_bridge'. Another Local channel is
        originated with half ('bob') executing Dial(Local/carol@default) while
        the other half ('echo_bob') executes Echo(). Half of the Local channel
        representing carol is bridged with 'bob' while the other half executes
        Echo().

        The AMI bridge action is then used to pull 'alice' and 'bob' out of
        their bridges and push them into a new bridge. The 'bob' channel half
        is then hung up. This test verifies that the StasisStart & StasisEnd
        events occur for 'alice' and that 'alice' does not re-enter Stasis when
        'bob' is hung up."

test-modules:
    test-object:
        typename: ari.AriBaseTestObject
    modules:
        -
            config-section: pluggable-config
            typename: 'pluggable_modules.EventActionModule'

pluggable-config:
    # Create channel where the 'alice' half enters Stasis and the 'echo_alice'
    # half enters dialplan executing Echo(). Then create Stasis bridge
    # 'test_bridge'.
    -
        ami-start:
        ari-requests:
            -
                method: 'post'
                uri: 'channels/alice'
                params:
                    endpoint: 'Local/echo@default'
                    app: 'testsuite'
                    otherChannelId: 'echo_alice'
            -
                method: 'post'
                uri: 'bridges/test_bridge'
    # Ensure the 'alice' channel half enters Stasis and add to bridge
    -
        ari-events:
            match:
                type: StasisStart
                application: 'testsuite'
                args: []
                channel:
                    id: 'alice'
            count: 1
        ari-requests:
            method: 'post'
            uri: 'bridges/test_bridge/addChannel'
            params:
                channel: 'alice'
    # Ensure 'alice' is in a Stasis bridge
    -
        ari-events:
            match:
                type: ChannelEnteredBridge
                bridge:
                    id: 'test_bridge'
                    channels: ['alice']
                channel:
                    id: 'alice'
            count: 1
    # Ensure 'echo_alice' is in Echo() and originate a call from bob to carol
    -
        ari-events:
            match:
                type: ChannelDialplan
                channel:
                    id: 'echo_alice'
                    state: 'Up'
            count: 1
        ami-actions:
            action:
                Action: 'Originate'
                Channel: 'Local/1003@default'
                Context: 'default'
                Exten: 'echo'
                Priority: '1'
                ChannelId: 'echo_bob'
                OtherChannelId: 'bob'
                Async: 'false'
    # Ensure 'bob' and the local channel representing carol are bridged and
    # then bridge the 'alice' & 'bob' channel halfs using AMI.
    -
        ami-events:
            conditions:
                match:
                    Event: VarSet
                    Uniqueid: 'bob'
                    Variable: 'BRIDGEPEER'
                    Value: 'Local/carol@default-.*'
            count: 1
        ami-actions:
            action:
                Action: 'Bridge'
                Channel1: 'alice'
                Channel2: 'bob'
    # Ensure 'alice' leaves the Stasis bridge (test_bridge)
    -
        ari-events:
            match:
                type: ChannelLeftBridge
                bridge:
                    id: 'test_bridge'
                    channels: []
                channel:
                    id: 'alice'
            count: 1
    # Ensure 'alice' leaves Stasis
    -
        ari-events:
            match:
                type: StasisEnd
                application: 'testsuite'
                channel:
                    id: 'alice'
            count: 1
    # Ensure alice enters the new bridge
    -
        ami-events:
            conditions:
                match:
                    Event: BridgeEnter
                    UniqueID: 'alice'
                nomatch:
                    Bridgeuniqueid: 'test_bridge'
            count: 1
    # Ensure 'bob' leaves the bridge with carol and later on with alice
    -
        ami-events:
            conditions:
                match:
                    Event: BridgeLeave
                    UniqueID: 'bob'
                nomatch:
                    Bridgeuniqueid: 'test_bridge'
            count: 2
    # Ensure 'alice' and the local channel representing bob are bridged.
    -
        ami-events:
            conditions:
                match:
                    Event: VarSet
                    Uniqueid: 'alice'
                    Variable: 'BRIDGEPEER'
                    Value: 'Local/1003@default-.*'
            count: 1
    # Ensure the non-stasis bridges used for bob & carol and alice & bob are
    # destroyed.
    -
        ami-events:
            conditions:
                match:
                    Event: BridgeDestroy
                nomatch:
                    Bridgeuniqueid: 'test_bridge'
            count: 2
    # Ensure carol is hung up and hang up bob
    -
        ami-events:
            conditions:
                match:
                    Event: Hangup
                    Channel: 'Local/carol@default-.*;2'
            count: 1
        ami-actions:
            action:
                Action: 'Hangup'
                Channel: 'bob'
    # Ensure alice is hung up (not returned to Stasis) and destroy the Stasis
    # bridge.
    -
        ami-events:
            conditions:
                match:
                    Event: Hangup
                    Uniqueid: 'alice'
            count: 1
        ari-requests:
            method: 'delete'
            uri: 'bridges/test_bridge'
    # Ensure the Stasis bridge was destroyed.
    -
        ari-events:
            match:
                type: BridgeDestroyed
                bridge:
                    id: 'test_bridge'
            count: 1
        stop_test:

properties:
    dependencies:
        - python : autobahn.websocket
        - python : requests
        - python : twisted
        - python : starpy
        - asterisk : res_ari_channels
        - asterisk : res_ari_bridges
        - asterisk : app_dial
        - asterisk : app_echo
    tags:
        - ARI
