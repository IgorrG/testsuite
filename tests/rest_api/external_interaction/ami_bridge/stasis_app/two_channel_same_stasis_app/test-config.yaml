testinfo:
    summary: Bridge channels via AMI that are in the same stasis app unbridged.
    description: |
        "This test originates a Local channel placing half ('alice') into
        Stasis(testsuite) and the other half ('echo_alice') into Echo().
        Another Local channel is originated with half ('bob') also placed into
        Stasis(testsuite) while the other half ('echo_bob') is placed into
        Echo(). The AMI bridge action is then used to pull both 'alice' & 'bob'
        out of the stasis app and then push them both into a non-stasis bridge.
        The 'bob' channel half is then hung up.

        This test verifies that the channels can be pulled out of the same
        stasis app and put into a non-stasis bridge via the AMI Bridge action.
        It also verifies that the StasisStart & StasisEnd events occur for both
        'alice' & 'bob' and ensures that 'alice' does not re-enter Stasis when
        'bob' is hung up."

test-modules:
    test-object:
        typename: ari.AriBaseTestObject
    modules:
        -
            config-section: pluggable-config
            typename: 'pluggable_modules.EventActionModule'

pluggable-config:
    # Create channel where the 'alice' half enters Stasis and the 'echo_alice'
    # half enters dialplan executing Echo()
    -
        ami-start:
        ari-requests:
            method: 'post'
            uri: 'channels/alice'
            params:
                endpoint: 'Local/echo@default'
                app: 'testsuite'
                otherChannelId: 'echo_alice'
    # Ensure the 'alice' channel half enters Stasis. Then create channel where
    # the 'bob' half enters Stasis and the 'echo_bob' half enters dialplan
    # executing Echo().
    -
        ari-events:
            match:
                type: StasisStart
                application: 'testsuite'
                args: []
                channel:
                    id: 'alice'
            count: 1
        ari-requests:
            method: 'post'
            uri: 'channels/bob'
            params:
                endpoint: 'Local/echo@default'
                app: 'testsuite'
                otherChannelId: 'echo_bob'
    # Ensure the 'bob' channel half enters Stasis. Then bridge 'alice' and
    # 'bob' using AMI.
    -
        ari-events:
            match:
                type: StasisStart
                application: 'testsuite'
                args: []
                channel:
                    id: 'bob'
            count: 1
        ami-actions:
            action:
                Action: 'Bridge'
                Channel1: 'alice'
                Channel2: 'bob'
    # Ensure 'alice' leaves Stasis
    -
        ari-events:
            match:
                type: StasisEnd
                application: 'testsuite'
                channel:
                    id: 'alice'
            count: 1
    # Ensure 'bob' leaves Stasis
    -
        ari-events:
            match:
                type: StasisEnd
                application: 'testsuite'
                channel:
                    id: 'bob'
            count: 1
    # Ensure 'alice' & 'bob' enter the non-stasis bridge. Then hang up 'bob'.
    -
        ami-events:
            conditions:
                match:
                    Event: BridgeEnter
                    UniqueID: '(alice|bob)'
                    BridgeNumChannels: '1'
            count: 1
    -
        ami-events:
            conditions:
                match:
                    Event: BridgeEnter
                    UniqueID: '(alice|bob)'
                    BridgeNumChannels: '2'
            count: 1
        ami-actions:
            action:
                Action: 'Hangup'
                Channel: 'bob'
    # Ensure bob is hung up.
    -
        ami-events:
            conditions:
                match:
                    Event: Hangup
                    Uniqueid: 'bob'
            count: 1
    # Ensure alice is hung up (not returned to Stasis).
    -
        ami-events:
            conditions:
                match:
                    Event: Hangup
                    Uniqueid: 'alice'
            count: 1
        stop_test:

properties:
    dependencies:
        - python : autobahn.websocket
        - python : requests
        - python : twisted
        - python : starpy
        - asterisk : res_ari_channels
        - asterisk : app_echo
    tags:
        - ARI
