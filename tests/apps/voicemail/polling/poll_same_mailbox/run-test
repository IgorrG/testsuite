#!/usr/bin/env python

'''
Copyright (C) 2019, Sangoma Technologies Corporation
Ben Ford <bford@digium.com>

This program is free software, distributed under the terms of
the GNU General Public License Version 2.
'''

import sys
import logging

from asterisk.test_case import TestCase
from asterisk.voicemail import VoiceMailMailboxManagement
from twisted.internet import reactor

LOGGER = logging.getLogger(__name__)

class PollingTest(TestCase):
    def __init__(self):
        TestCase.__init__(self)
        self.passed = False
        self.counter = 0
        self.create_asterisk()

    def stop_test(self, passed=False):
        self.passed = passed
        reactor.stop()

    def handle_message_waiting(self, ami, event):

        if event.get("mailbox") != "1234@default":
            return

        old = int(event.get("old"))
        new = int(event.get("new"))
        waiting = int(event.get("waiting"))

        # Conditions:
        # - If INBOX count is 1, increment self.counter
        # - When self.counter reaches 3, we got all 3 events we expected,
        #   so delete the voicemail
        # - INBOX count should only be 0 after we delete the voicemail, so
        #   increment the counter here to end the test
        # - Once self.counter reaches 3 after removing the voicemail, we've
        #   received all the events, so stop the test
        if new == 1 and waiting == 1:
            if old != 0:
                LOGGER.error("Expected 'Old' to be 0")
                self.stop_test()
            self.counter += 1
            if self.counter == 3:
                self.counter = 0
                if not self.voicemailManager.remove_mailbox("default", "1234"):
                    LOGGER.error("Failed to remove voicemail")
                    self.stop_test()
        elif new == 0 and waiting == 0 and old == 0:
            self.counter += 1
            if self.counter == 3:
                self.stop_test(True)

    def ami_connect(self, ami):
        ami.registerEvent("MessageWaiting", self.handle_message_waiting)

        self.voicemailManager = VoiceMailMailboxManagement(self.ast[0])
        self.voicemailManager.create_mailbox("default", "1234", True)

        formats = ["ulaw"]
        if not self.voicemailManager.create_dummy_voicemail("default", "1234", VoiceMailMailboxManagement.inbox_folder_name, 1, formats):
            LOGGER.error("Failed to create voicemail")
            self.stop_test()

    def run(self):
        TestCase.run(self)
        self.create_ami_factory()

def main():
    test = PollingTest()
    reactor.run()
    if not test.passed:
        return 1
    return 0

if __name__ == "__main__":
    sys.exit(main() or 0)
