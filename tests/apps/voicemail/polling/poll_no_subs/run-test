#!/usr/bin/env python

'''
Copyright (C) 2019, Sangoma Technologies Corporation
Ben Ford <bford@digium.com>

This program is free software, distributed under the terms of
the GNU General Public License Version 2.
'''

import sys
import logging

from asterisk.test_case import TestCase
from asterisk.voicemail import VoiceMailMailboxManagement
from twisted.internet import reactor

LOGGER = logging.getLogger(__name__)

class PollingTest(TestCase):
    def __init__(self):
        TestCase.__init__(self)
        self.passed = False
        self.create_asterisk()

    def stop_test(self, passed=False):
        self.passed = passed
        # Sometimes the reactor has already stopped, we only care if the test passed
        try:
            reactor.stop()
        except Exception as e:
            LOGGER.info("Error while stopping reactor: '{0}'".format(e))

    def handle_message_waiting(self, ami, event):
        LOGGER.error("Got a MessageWaiting event we weren't expecting!")
        self.stop_test()

    def handle_hangup(self, ami, event):
        if "Local/playback@default" in event.get("channel"):
            self.stop_test(True)

    def handle_originate_failure(self, reason):
        LOGGER.error("Failed to originate call! Reason: {0}".format(reason))
        self.stop_test()

    def ami_connect(self, ami):
        ami.registerEvent("MessageWaiting", self.handle_message_waiting)
        ami.registerEvent("Hangup", self.handle_hangup)

        self.voicemailManager = VoiceMailMailboxManagement(self.ast[0])
        self.voicemailManager.create_mailbox("default", "1234", True)

        formats = ["ulaw"]
        if not self.voicemailManager.create_dummy_voicemail("default", "1234", VoiceMailMailboxManagement.inbox_folder_name, 1, formats):
            LOGGER.error("Failed to create voicemail")
            self.stop_test()

        variable = {}
        ami.originate(channel="Local/playback@default",
                      context="default",
                      exten="echo",
                      priority="1",
                      variable=variable
                    ).addErrback(self.handle_originate_failure)

    def run(self):
        TestCase.run(self)
        self.create_ami_factory()

def main():
    test = PollingTest()
    reactor.run()
    if not test.passed:
        return 1
    return 0

if __name__ == "__main__":
    sys.exit(main() or 0)
