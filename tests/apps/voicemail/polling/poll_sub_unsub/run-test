#!/usr/bin/env python

'''
Copyright (C) 2019, Sangoma Technologies Corporation
Ben Ford <bford@digium.com>

This program is free software, distributed under the terms of
the GNU General Public License Version 2.
'''

import sys
import logging

from asterisk.asterisk import Asterisk
from asterisk.test_case import TestCase
from asterisk.voicemail import VoiceMailMailboxManagement
from asterisk.sipp import SIPpScenario
from twisted.internet import reactor

LOGGER = logging.getLogger(__name__)

class PollingTest(TestCase):
    def __init__(self):
        TestCase.__init__(self)
        self.passed = False
        self.test_phase = 1
        self._registered_done = False
        self._unregistered_done = False
        self.sipp_register = {'scenario': 'register.xml',
                              '-i': '127.0.0.2', '-p': '5061',
                              '-s': '1234'}
        self.sipp_unregister = {'scenario': 'unregister.xml',
                                '-i': '127.0.0.2', '-p': '5061',
                                '-s': '1234'}
        self.create_asterisk()

    def stop_test(self, passed=False):
        self.passed = passed
        # Sometimes the reactor has already stopped, we only care if the test passed
        try:
            reactor.stop()
        except Exception as e:
            LOGGER.info("Error while stopping reactor: '{0}'".format(e))

    def handle_message_waiting(self, ami, event):

        if event.get("mailbox") != "1234@default":
            return

        old = int(event.get("old"))
        new = int(event.get("new"))
        waiting = int(event.get("waiting"))

        # Phase 1: We should get a MessageWaiting notification after registering
        if self.test_phase == 1:
            if new != 1 or waiting != 1 or old != 0:
                LOGGER.error("Mailbox count was different than expected")
                self.stop_test()
            sipp = SIPpScenario(self.test_name, self.sipp_unregister)
            sipp.run(self)
            self.test_phase = 2
        # Phase 2: There should not be a notification after unregistering
        elif self.test_phase == 2:
            LOGGER.error("Got a MessageWaiting event in a test phase we shouldn't have")
            self.stop_test()

    def handle_originate_failure(self, reason):
        LOGGER.error("Failed to originate call! Reason: {0}".format(reason))
        self.stop_test()

    def handle_hangup(self, ami, event):
        if "Local/playback@default" in event.get("channel"):
            self.stop_test(True)

    def handle_test_event(self, ami, event):

        state = event.get("state")

        if state != "AOR_CONTACT_ADDED" and state != "AOR_CONTACT_REMOVED":
            return

        if event.get("contact") != "sip:1234@127.0.0.2:5061":
            return

        if state == "AOR_CONTACT_ADDED":
            self.voicemailManager = VoiceMailMailboxManagement(self.ast[0])
            self.voicemailManager.create_mailbox("default", "1234", True)
            formats = ["ulaw"]
            if not self.voicemailManager.create_dummy_voicemail("default", "1234", VoiceMailMailboxManagement.inbox_folder_name, 1, formats):
                LOGGER.error("Failed to create voicemail")
                self.stop_test()
        elif state == "AOR_CONTACT_REMOVED":
            # Remove the voicemail from the mailbox
            self.voicemailManager.remove_mailbox("default", "1234")

            # Originate a channel that will end the test on hangup
            variable = {}
            ami.originate(channel="Local/playback@default",
                          context="default",
                          exten="echo",
                          priority="1",
                          variable=variable
                         ).addErrback(self.handle_originate_failure)

    def ami_connect(self, ami):

        ami.registerEvent("TestEvent", self.handle_test_event)
        ami.registerEvent("MessageWaiting", self.handle_message_waiting)
        ami.registerEvent("Hangup", self.handle_hangup)

        sipp = SIPpScenario(self.test_name, self.sipp_register)
        sipp.run(self)

    def run(self):
        TestCase.run(self)
        self.create_ami_factory()

def main():
    test = PollingTest()
    reactor.run()
    if not test.passed:
        return 1
    return 0

if __name__ == "__main__":
    sys.exit(main() or 0)
