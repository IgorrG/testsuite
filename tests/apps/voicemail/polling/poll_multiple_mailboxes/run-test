#!/usr/bin/env python

'''
Copyright (C) 2019, Sangoma Technologies Corporation
Ben Ford <bford@digium.com>

This program is free software, distributed under the terms of
the GNU General Public License Version 2.
'''

import sys
import logging

from asterisk.test_case import TestCase
from asterisk.voicemail import VoiceMailMailboxManagement
from twisted.internet import reactor

LOGGER = logging.getLogger(__name__)

class PollingTest(TestCase):
    def __init__(self):
        TestCase.__init__(self)
        self.flags = 0
        self.create_asterisk()

    def stop_test(self, passed=False):
        self.set_passed(passed)
        self.stop_reactor()

    def handle_message_waiting(self, ami, event):

        mailbox = event.get("mailbox")
        old = int(event.get("old"))
        new = int(event.get("new"))
        waiting = int(event.get("waiting"))

        # Conditions:
        # - If INBOX count is 1, then we need to remove the voicemail and set flag
        # - If INBOX count is 0, just set flag
        # - Once flags reaches 2^6-1 (111111), we've met all conditions
        if new == 1 and waiting == 1:
            if old != 0:
                LOGGER.error("Expected 'Old' to be 0")
                self.stop_test()
            if mailbox == "1234@default":
                self.flags |= 1
            elif mailbox == "5678@default":
                self.flags |= 2
            elif mailbox == "9999@default":
                self.flags |= 4

            data = mailbox.split("@")
            mailbox = data[0]
            if not self.voicemailManager.remove_mailbox("default", mailbox):
                LOGGER.error("Failed to remove voicemail for mailbox {0}".format(mailbox))
                self.stop_test()

        elif new == 0 and waiting == 0 and old == 0:
            if mailbox == "1234@default":
                self.flags |= 8
            elif mailbox == "5678@default":
                self.flags |= 16
            elif mailbox == "9999@default":
                self.flags |= 32
        
        # self.flags should be 63 (2^6-1 == 111111 in binary)
        if self.flags == 63:
            self.stop_test(True)

    def ami_connect(self, ami):
        ami.registerEvent("MessageWaiting", self.handle_message_waiting)

        mailboxes = ["1234", "5678", "9999"]
        self.voicemailManager = VoiceMailMailboxManagement(self.ast[0])
        for mailbox in mailboxes:
            self.voicemailManager.create_mailbox("default", mailbox, True)

        formats = ["ulaw"]
        for mailbox in mailboxes:
            if not self.voicemailManager.create_dummy_voicemail("default", mailbox, VoiceMailMailboxManagement.inbox_folder_name, 1, formats):
                LOGGER.error("Failed to create voicemail for mailbox {0}".format(mailbox))
                self.stop_test()

    def run(self):
        TestCase.run(self)
        self.create_ami_factory()

def main():
    test = PollingTest()
    reactor.run()
    if not test.passed:
        return 1
    return 0

if __name__ == "__main__":
    sys.exit(main() or 0)
