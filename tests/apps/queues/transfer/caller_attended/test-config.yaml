testinfo:
    summary: "Caller initiated attended queue transfer"
    description: |
        "This verifies a caller initiated attended transfer using queues works
         as expected and that the app_queue's attended transfer stasis callback
         handler is executed appropriately.

         Alice dials into a queue and connects with member bob. Once alice and
         bob are bridged, alice puts bob on hold, and then dials charlie. After
         alice and charlie are bridged alice transfers bob to charlie using an
         attended transfer."

test-modules:
    test-object:
        -
            config-section: sipp-config
            typename: 'sipp.SIPpTestCase'
    modules:
        -
            config-section: ami-config
            typename: 'pluggable_modules.EventActionModule'

sipp-config:
    memcheck-delay-stop: 7
    fail-on-any: True
    test-iterations:
        -
            scenarios:
                - { 'coordinated-sender': {'key-args': {'scenario':'alice-calls-101.xml', '-i': '127.0.0.1', '-p':'5061', '-sleep': '1'} },
                    'coordinated-receiver': { 'key-args': {'scenario':'alice-calls-102.xml', '-i': '127.0.0.1', '-p':'5161'} } }
                - { 'key-args': {'scenario': 'bob-registers.xml', '-i': '127.0.0.1', '-p': '5062', '-oocsf': 'wait-for-a-call.xml'} }
                - { 'key-args': {'scenario': 'charlie-registers.xml', '-i': '127.0.0.1', '-p': '5063', '-oocsf': 'wait-for-a-call-then-send-bye.xml'} }

ami-config:
    # Ensure alice and bob are connected. Alice places bob on hold.
    -
        ami-events:
            conditions:
                match:
                    Event: 'AgentConnect'
                    Channel: 'PJSIP/alice-.*'
                    MemberName: 'PJSIP/bob'
            count: 1
    # Look for Bob to be on hold.
    -
        ami-events:
            conditions:
                match:
                    Event: 'MusicOnHoldStart'
                    Channel: 'PJSIP/bob-.*'
            count: 1
    # Ensure alice and charlie are bridged.
    -
        ami-events:
            conditions:
                match:
                    Event: 'VarSet'
                    Variable: BRIDGEPEER
                    Channel: 'PJSIP/alice-.*'
                    Value: 'PJSIP/charlie-.*'
            count: '3'
            trigger-on-count: True
    # Ensure the transfer is successful.
    -
        ami-events:
            conditions:
                match:
                    Event: 'AttendedTransfer'
                    OrigTransfererChannel: 'PJSIP/alice-.*'
                    SecondTransfererChannel: 'PJSIP/alice-.*'
                    TransfereeChannel: 'PJSIP/bob-.*'
                    TransferTargetChannel: 'PJSIP/charlie-.*'
                    Result: 'Success'
            count: 1
    -
        ami-events:
            conditions:
                match:
                    Event: 'AgentComplete'
                    Channel: 'PJSIP/alice-.*'
                    MemberName: 'PJSIP/bob'
                    Reason: 'transfer'
            count: 1
    # Ensure each alice channel leaves the bridge it was in.
    -
        ami-events:
            conditions:
                match:
                    Event: 'BridgeLeave'
                    Channel: 'PJSIP/alice-.*'
            count: 2
    # Ensure alice hangs up with bob and charlie, then stop
    -
        ami-events:
            conditions:
                match:
                    Event: 'Hangup'
                    Channel: 'PJSIP/alice-.*'
            count: 2
            trigger-on-count: True
        stop_test:

properties:
    dependencies:
        - python : twisted
        - python : starpy
        - asterisk : res_pjsip
    tags:
        - pjsip
        - refleaks
