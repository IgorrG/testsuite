#!/usr/bin/env python
"""
Copyright (C) 2015, Digium, Inc.
Ashley Sanders <asanders@digium.com>

This program is free software, distributed under the terms of
the GNU General Public License Version 2.
"""


import logging
import requests
import sys
import re

sys.path.append("lib/python")

from twisted.internet import reactor
from asterisk.asterisk import Asterisk
from asterisk.test_case import TestCase

LOGGER = logging.getLogger(__name__)

EXPECTED_NAMES = ["^Peabody$", "^Asterisk/", None]

BASE_URL = "http://127.0.0.%d:8088/httpstatus"

class HttpClientTest(TestCase):
    """Responsible for making a request to the http-server and then parsing
    response headers to verify that the value returned for 'Server' matches
    the expected value."""

    def __init__(self):
        """Constructor."""

        TestCase.__init__(self)
        self.create_asterisk(3)

    def run(self):
        """Runs the test."""

        TestCase.run(self)

        for i in range(0, 3):
            name = EXPECTED_NAMES[i]

            url = BASE_URL % (i+1)

            self.run_scenario(url, name)
            if self.passed == False:
                break

        LOGGER.debug("Stopping reactor...")
        self.stop_reactor()

    def run_scenario(self, url, expected_name):
        """Runs an individual test scenario.

        Keyword Arguments:
        url             --  The url to use for making the server request
        expected_name   --  The name that the server is expected to return
                            in its response headers
        """

        LOGGER.debug("Running %s", self)

        LOGGER.debug("[url]: [%s]", url)
        LOGGER.debug("[expected_name]: [%s]", expected_name)

        resp = requests.get(url)
        LOGGER.debug("[resp]: [%r]", resp)

        server = resp.headers.get('Server')
        LOGGER.debug("[server]: [%s]", server)

        if (not expected_name and server) or (expected_name is not None and re.match(expected_name, server) is None):
            LOGGER.debug("[%s] != [%s]", server, expected_name)
            self.set_passed(False)
            return

        self.set_passed(True)
        return

def main():
    """Main entry-point for the test."""

    test = HttpClientTest()
    reactor.run()

    if test.passed:
        return 0
    return 1

if __name__ == "__main__":
    sys.exit(main() or 0)
