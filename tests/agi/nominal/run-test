#!/usr/bin/env python
"""
Copyright (C) 2018, Digium, Inc.
Scott Griepentrog <scott@griepentrog.com>

This progream is free software, distributed under the terms of
the GNU General Public License Version 2.
"""

import os
import sys
import logging

from twisted.internet import reactor
from shutil import copy

sys.path.append("lib/python")
from asterisk.test_case import TestCase

LOGGER = logging.getLogger(__name__)
PATH = os.path.dirname(os.path.realpath(__file__))
TEST_CALLS = 10


class AGITest(TestCase):
    """
    This is the class that contains all the methods needed to run the test.
    """
    def __init__(self):
        """
        Initialization for class.
        call_count keeps track of all successful tests.
        """
        TestCase.__init__(self)
        self.call_count = 0
        self.reactor_timeout = TEST_CALLS + 10
        self.create_asterisk()

    def run(self):
        """
        Creates the AMI connection with Asterisk.
        """
        TestCase.run(self)
        self.copy_files()
        self.create_ami_factory()

    def copy_files(self):
        """Copy agi script files to the path of the current test"""
        for filename in os.listdir(PATH):
            if filename[-4:] == '.agi':
                copy("%s/%s" % (PATH, filename),
                     "%s/var/lib/asterisk/agi-bin/"
                     "%s" % (self.ast[0].base, filename))

    def ami_connect(self, ami):
        """
        Sets up the AMI for Asterisk.
        """
        ami.registerEvent('UserEvent', self.user_event_handler)
        LOGGER.info("---Starting AGI nominal test---")

        def originate(call):
            ami.originate(channel="Local/nominal@default",
                          application="Echo"
                          ).addErrback(self.handle_originate_failure)

        for call in range(TEST_CALLS):
            reactor.callLater(call, originate, call)

    def user_event_handler(self, result, event):
        """
        Checks to see if the AGI script was completed as expected.
        """
        if event['userevent'] != 'AgiCompleted':
            print(event['userevent'])
            return

        self.call_count += 1
        LOGGER.info("Successful AGI: %d " % self.call_count)
        if self.call_count == TEST_CALLS:
            self.stop_reactor()


def main():
    """
    Main method, run by default, determines if test passes or fails.
    """
    test = AGITest()
    reactor.run()
    if test.call_count != TEST_CALLS:
        LOGGER.error("The expected amount of calls did not complete. "
                     "Expected successes: %d Actual: "
                     "%d" % (TEST_CALLS, test.call_count))
        return 1
    return 0


if __name__ == "__main__":
    sys.exit(main() or 0)
