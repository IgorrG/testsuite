#!/usr/bin/env python
'''
Copyright (C) 2014, Fairview 5 Engineering, LLC
George Joseph <george.joseph@fairview5.com>

This program is free software, distributed under the terms of
the GNU General Public License Version 2.
'''

import sys
import logging
from twisted.internet import reactor

sys.path.append("lib/python")
from asterisk.test_case import TestCase
LOGGER = logging.getLogger(__name__)

class DialplanSaveTest(TestCase):

    def __init__(self):
        TestCase.__init__(self)
        # artificially high timeout as this can take a while
        self.reactor_timeout = 300
        self.create_asterisk(1)

    def run(self):
        TestCase.run(self)

        def callback(defer):
            if defer.output.find("test1=Alert-Info: ;answer-after=0") == -1:
                print("Dialplan did not load correctly")
                print(defer.output.strip())
                reactor.callLater(1,self.failure)
            else:
                reactor.callLater(3,self.save)

        def errback(failure):
            LOGGER.error("CLI dialplan show failed");
            reactor.callLater(1,self.failure)

        df = self.ast[0].cli_exec("dialplan show globals")
        df.addCallback(callback)
        df.addErrback(errback)

    def save(self):

        def callback(defer):
            if defer.output.find("Dialplan successfully saved into") == -1:
                print("Dialplan did not save correctly")
                print(defer.output.strip())
                reactor.callLater(1,self.failure)
            else:
                reactor.callLater(3,self.reload)

        def errback(failure):
            LOGGER.error("CLI dialplan save failed")
            reactor.callLater(1,self.failure)

        df = self.ast[0].cli_exec("dialplan save")
        df.addCallback(callback)
        df.addErrback(errback)

    def reload(self):

        def callback(defer):
            if defer.output.find("Dialplan reloaded.") == -1:
                print("Dialplan did not reload correctly")
                print(defer.output.strip())
                reactor.callLater(1,self.failure)
            else:
                reactor.callLater(3,self.retest)

        def errback(failure):
            LOGGER.error("CLI dialplan reload")
            reactor.callLater(1,self.failure)

        df = self.ast[0].cli_exec("dialplan reload")
        df.addCallback(callback)
        df.addErrback(errback)


    def retest(self):

        def callback(defer):
            if defer.output.find("test1=Alert-Info: ;answer-after=0") == -1:
                print("Dialplan did not reload correctly")
                print(defer.output.strip())
                reactor.callLater(1,self.failure)
            else:
                reactor.callLater(3,self.success)

        def errback(failure):
            LOGGER.error("CLI dialplan show failed");
            reactor.callLater(1,self.failure)

        df = self.ast[0].cli_exec("dialplan show globals")
        df.addCallback(callback)
        df.addErrback(errback)

    def success(self):
        self.passed = True
        self.stop_reactor()

    def failure(self):
        self.stop_reactor()

def main():
    test = DialplanSaveTest()
    test.start_asterisk()
    reactor.run()
    test.stop_asterisk()
    if not test.passed:
        return 1
    return 0

if __name__ == "__main__":
    sys.exit(main() or 0)

# vim:sw=4:ts=4:expandtab:textwidth=79
