testinfo:
    summary:     'Ensures MWI bodies consist of accurate information'
    description: |
        "Unsolicited MWI notifications are sent to an endpoint as mailbox state updates. sipp
        accounts notify us when an MWI notification arrives. We check the body of these MWI
        notifications to ensure that they contain the data we expect them to."


properties:
    dependencies:
        - python: 'twisted'
        - python: 'starpy'
        - app: 'sipp'
        - asterisk: 'res_pjsip'
        - asterisk: 'res_pjsip_mwi'
        - asterisk: 'res_mwi_external'
        - asterisk: 'res_mwi_external_ami'
    tags:
        - pjsip
        - mwi_external
        - refleaks

test-modules:
    add-test-to-search-path: 'True'
    test-object:
        config-section: sipp-config
        typename: 'sipp_iterator.SIPpIteratorTestCase'
    modules:
        -
            config-section: 'ami-config'
            typename: 'pluggable_modules.EventActionModule'

sipp-config:
    connect-ami: 'True'
    reactor-timeout: 30
    type: 'single'
    scenarios:
        # Alice registers, no AMI action
        - { 'scenario': {'Name': 'alice-registers.xml', 'port': '5061', 'target': '127.0.0.1', 'ordered-args': {'-aa'}},
            'action': {'Action': 'none'}}
        # Alice waits for a NOTIFY, generated by MWIUpdate
        - { 'scenario': {'Name': 'alice-is-notified-1.xml', 'port': '5061', 'target': '127.0.0.1'},
            'action': {'Action': 'MWIUpdate', 'Mailbox': 'alice', 'NewMessages':'2', 'OldMessages':'0'}}
        # Alice waits for a NOTIFY, generated by MWIUpdate
        - { 'scenario': {'Name': 'alice-is-notified-2.xml', 'port': '5061', 'target': '127.0.0.1'},
            'action': {'Action': 'MWIUpdate', 'Mailbox': 'alice', 'NewMessages':'1', 'OldMessages':'1'}}
        # Alice waits for a NOTIFY, generated by MWIUpdate
        - { 'scenario': {'Name': 'alice-is-notified-3.xml', 'port': '5061', 'target': '127.0.0.1'},
            'action': {'Action': 'MWIUpdate', 'Mailbox': 'alice', 'NewMessages':'0', 'OldMessages':'2'}}
        # Alice waits for a NOTIFY, generated by MWIDelete
        - { 'scenario': {'Name': 'alice-is-notified-4.xml', 'port': '5061', 'target': '127.0.0.1'},
            'action': {'Action': 'MWIDelete', 'Mailbox': 'alice'}}
        # indicate no more scenarios to run, send testComplete Event
        - { 'scenario': {'Name': 'done'},
            'action': {'Action': 'UserEvent', 'UserEvent': 'testComplete'}}

ami-config:
    -
        ami-events:
            conditions:
                match:
                    Event: 'UserEvent'
                    UserEvent: 'testComplete'
            count: 1
        stop_test:

