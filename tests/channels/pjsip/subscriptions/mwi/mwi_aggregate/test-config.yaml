testinfo:
    summary:     'Ensures mailbox state is aggregated or not aggregated when appropriate'
    description: |
        "Alice and Bob both receive mailbox updates for mailbox_a and mailbox_b. However, Alice
        receives the aggregated state of both mailboxes and Bob receives individual mailbox notifications
        that are not aggregated. The test consists of first changing the state of mailbox_a so that it has
        2 new messages and 1 old message. Alice and Bob should each receive the same MWI update. Next,
        mailbox_b is updated to have 3 new messages and 3 old messages. Alice should receive an MWI
        notification with the combined mailbox state (5 new messages, 4 old messages) and Bob should
        receive an MWI notification with just the new mailbox state (3 new messages, 3 old messages)."


properties:
    dependencies:
        - python: 'twisted'
        - python: 'starpy'
        - app: 'sipp'
        - asterisk: 'res_pjsip'
        - asterisk: 'res_pjsip_mwi'
        - asterisk: 'res_mwi_external'
        - asterisk: 'res_mwi_external_ami'
    tags:
        - pjsip
        - mwi_external
        - refleaks

test-modules:
    add-test-to-search-path: 'True'
    test-object:
        config-section: sipp-config
        typename: 'sipp_iterator.SIPpIteratorTestCase'
    modules:
        -
            config-section: 'ami-config'
            typename: 'pluggable_modules.EventActionModule'

sipp-config:
    connect-ami: 'True'
    reactor-timeout: 30
    type: 'multi'
    scenarios:
        # Alice and bob register, receive initial NOTIFYs. No actions
        - { 'scenario': {'Name': 'register', 'sequence': [
                {'Name': 'alice-registers.xml', 'port': '5061', 'target': '127.0.0.1', 'ordered-args': {'-aa'}},
                {'Name': 'bob-registers.xml', 'port': '5062', 'target': '127.0.0.1', 'ordered-args': {'-aa'}} ]},
            'action': {'Messages': [
                {'Action': 'none'} ]}}
        # Alice and Bob are both sent NOTIFY messages, triggered by the MWIUpdate
        - { 'scenario': {'Name': 'mailbox_a', 'sequence': [
                {'Name': 'alice-is-notified-1.xml', 'port': '5061', 'target': '127.0.0.1'},
                {'Name': 'bob-is-notified-1.xml', 'port': '5062', 'target': '127.0.0.1'} ]},
            'action': {'Messages': [
                {'Action': 'MWIUpdate', 'Mailbox': 'mailbox_a', 'NewMessages':'2', 'OldMessages':'1'} ]}}
        # Alice and Bob are both sent NOTIFY messages, triggered by the MWIUpdate
        - { 'scenario': {'Name': 'mailbox_b', 'sequence': [
                {'Name': 'alice-is-notified-2.xml', 'port': '5061', 'target': '127.0.0.1'},
                {'Name': 'bob-is-notified-2.xml', 'port': '5062', 'target': '127.0.0.1'} ]},
            'action': {'Messages': [
                {'Action': 'MWIUpdate', 'Mailbox': 'mailbox_b', 'NewMessages':'3', 'OldMessages':'3'} ]}}
        # indicate no more scenarios to run, send testComplete Event
        - { 'scenario': {'Name': 'done'},
            'action': {'Messages': [
                {'Action': 'UserEvent', 'UserEvent': 'testComplete'} ]}}

ami-config:
    -
        ami-events:
            conditions:
                match:
                    Event: 'UserEvent'
                    UserEvent: 'testComplete'
            count: 1
        stop_test:

