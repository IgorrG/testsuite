testinfo:
    summary: 'Ensure that multiple state changes to a single resource result in a single NOTIFY'
    description: |
        'This runs a similar test to the basic scenario, except that where we had sent single
        state changes before, we send two at a time. Here, we are ensuring that the two state
        changes result in only a single NOTIFY being sent, since the batching process should
        combine the state changes into one NOTIFY.'


properties:
    dependencies:
        - buildoption: 'TEST_FRAMEWORK'
        - python: 'twisted'
        - python: 'starpy'
        - asterisk: 'res_pjsip'
        - asterisk: 'res_pjsip_pubsub'
    tags:
        - rls
        - pjsip

test-modules:
    test-object:
        config-section: 'test-case-config'
        typename: 'sipp.SIPpTestCase'
    modules:
        -
            config-section: 'ami-config'
            typename: 'pluggable_modules.EventActionModule'

test-case-config:
    reactor-timeout: 15
    stop-after-scenarios: True
    test-iterations:
        -
            scenarios:
                - { 'target': '127.0.0.1:5060', 'key-args': {'scenario': 'subscribe.xml', '-i': '127.0.0.1', '-p': '5062', '-s': 'pres_list'} }

ami-config:
    -
        ami-events:
            conditions:
                match:
                    Event: 'TestEvent'
                    State: 'SUBSCRIPTION_ESTABLISHED'
                    Resource: 'pres_list'
            count: '1'
        ami-actions:
            action:
                Action: 'SetVar'
                Variable: 'DEVICE_STATE(Custom:alice)'
                Value: 'InUse'
    -
        ami-events:
            conditions:
                match:
                    Event: 'DeviceStateChange'
                    Device: 'Custom:alice'
                    State: 'INUSE'
            count: '1'
        ami-actions:
            action:
                Action: 'SetVar'
                Variable: 'DEVICE_STATE(Custom:alice)'
                Value: 'NOT_INUSE'
    -
        ami-events:
            conditions:
                match:
                    Event: 'DeviceStateChange'
                    Device: 'Custom:alice'
                    State: 'NOT_INUSE'
            count: '1'
    -
        ami-events:
            conditions:
                match:
                    Event: 'TestEvent'
                    State: 'SUBSCRIPTION_REFRESHED'
            requirements:
                match:
                    Resource: 'pres_list'
            count: '1'
        ami-actions:
            action:
                Action: 'SetVar'
                Variable: 'DEVICE_STATE(Custom:bob)'
                Value: 'InUse'
    -
        ami-events:
            conditions:
                match:
                    Event: 'DeviceStateChange'
                    Device: 'Custom:bob'
                    State: 'INUSE'
            count: '1'
        ami-actions:
            action:
                Action: 'SetVar'
                Variable: 'DEVICE_STATE(Custom:bob)'
                Value: 'NOT_INUSE'
    -
        ami-events:
            conditions:
                match:
                    Event: 'DeviceStateChange'
                    Device: 'Custom:bob'
                    State: 'NOT_INUSE'
            count: '1'
