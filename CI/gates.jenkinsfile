/*
 * This pipeline is the "template" for the Testsuite Unit Tests multi-branch
 * parent job.  Jenkins will automatically scan the branches in the "testsuite"
 * or "Security-testsuite" projects in Gerrit and automatically create a branch-
 * specific job for each branch it finds this file in.
 *
 * This file starts as a declarative pipeline because with a declarative
 * pipeline, you can define the trigger in the pipeline file.  This keeps
 * everything in one place.  We transition to scripted pipeline later on because
 * we need to dynamically determine which docker image we're going to use and
 * you can't do that in a delcarative pipeline.
 */
def timeoutTime = 60
def timeoutUnits = 'MINUTES'
if (env.TIMEOUT_GATES) {
	def _timeout = env.TIMEOUT_GATES.split()
	timeoutTime = _timeout[0].toInteger()
	timeoutUnits = _timeout[1]
}

pipeline {
    options {
        ansiColor('gnome-terminal')
        throttle(['testsuite-gate'])
        timestamps()
        timeout(time: timeoutTime, unit: timeoutUnits)
    }

	triggers {
		/*
		 * This trigger will match either the "asterisk" or "Security-asterisk"
		 * projects.  The branch is taken from the branch this job was created
		 * for.
		 */
		gerrit customUrl: '',
			commentTextParameterMode: 'PLAIN',
			commitMessageParameterMode: 'PLAIN',
			gerritBuildSuccessfulVerifiedValue: 2,
			gerritBuildFailedVerifiedValue: -1,
			gerritBuildUnstableVerifiedValue: -1,
			gerritProjects: [
				[branches: [[compareType: 'PLAIN', pattern: "${BRANCH_NAME}"]],
					compareType: 'REG_EXP',
					disableStrictForbiddenFileVerification: false,
					pattern: '^(Security-)?testsuite.*'
				]
			],
			silentMode: false,
			triggerOnEvents: [
				commentAddedContains('^regate$'),
				commentAdded(commentAddedTriggerApprovalValue: '+2', verdictCategory: 'Code-Review'),
			],
			skipVote: [
				onFailed: false,
				onNotBuilt: true,
				onSuccessful: false,
				onUnstable: false
			]
	}
	agent {
		/* All of the stages need to be performed on a docker host */
		label "testsuite-gate"
	}

	stages {
		stage ("->") {
			/*
			 * Jenkins will try to automatically rebuild this job when
			 * the jenkinsfile changes but since this job is dependent on
			 * Gerrit, we really don't want to do anything in that case.
			 */
			when {
				not { environment name: 'GERRIT_CHANGE_NUMBER', value: '' }
                /* If "skip_gate" is in the comments, don't run the job */
				not { expression { env.GERRIT_EVENT_COMMENT_TEXT ==~ /.*skip_gate.*/ } }
			}
			steps {
				script {
					manager.build.displayName = "${env.GERRIT_CHANGE_NUMBER}"
					manager.createSummary("/plugin/workflow-job/images/48x48/pipelinejob.png").appendText("Docker Host: ${NODE_NAME}", false)

					stage ("Checkout") {
						sh "sudo chown -R jenkins:users ."
						env.GERRIT_PROJECT_URL = env.GIT_URL.replaceAll(/[^\/]+$/, env.GERRIT_PROJECT)
						sh "printenv -0 | sort -z | tr '\\0' '\\n'"

						/*
						 * Jenkins has already automatically checked out the base branch
						 * for this change but we now need to check out the change itself
						 * and rebase it on the current base branch.  If the rebase fails,
						 * that's an indication to the user that they'll need to sort their
						 * change out.
						 *
						 * The Gerrit Trigger provides all the URLs and refspecs to
						 * check out the change.
						 */
						checkout scm: [$class: 'GitSCM',
							branches: [[name: env.GERRIT_BRANCH ]],
							extensions: [
								[$class: 'ScmName', name: env.GERRIT_NAME],
								[$class: 'CleanBeforeCheckout'],
								[$class: 'PreBuildMerge', options: [
									mergeRemote: env.GERRIT_NAME,
									fastForwardMode: 'NO_FF',
									mergeStrategy: 'RECURSIVE',
									mergeTarget: env.GERRIT_BRANCH]],
								[$class: 'CloneOption',
									honorRefspec: true,
									noTags: true,
									depth: 10,
									shallow: true
								],
								[$class: 'PruneStaleBranch'],
								[$class: 'BuildChooserSetting',
									buildChooser: [$class: 'GerritTriggerBuildChooser']
								]
							],
							userRemoteConfigs: [
								[name: env.GERRIT_NAME, refspec: env.GERRIT_REFSPEC, url: env.GERRIT_PROJECT_URL ]
							]
						]

						sh "sudo CI/setupJenkinsEnvironment.sh --output-dir=CI/output"
					}

					def images = env.DOCKER_IMAGES_TESTSUITE.split(' ')
					def r = currentBuild.startTimeInMillis % images.length
					def ri = images[(int)r]
					def randomImage = env.DOCKER_REGISTRY + "/" + ri;

					def bt = env.BUILD_TAG.replaceAll(/[^a-zA-Z0-9_.-]/, '-')
					def dockerOptions = "--ulimit core=0 --ulimit nofile=10240 " +
						" -v /srv/jenkins:/srv/jenkins:rw -v /srv/cache:/srv/cache:rw " +
						" --entrypoint='' --name ${bt}-build"
					def outputDir = "CI/output"
					def astDir = "${outputDir}/asterisk"

					manager.createSummary("/plugin/workflow-job/images/48x48/pipelinejob.png").appendText("Docker Image: ${randomImage}", false)
					def img = docker.image(randomImage)
					img.pull()
					img.inside(dockerOptions) {
						def asteriskUrl = env.GERRIT_PROJECT_URL.replaceAll(/\/(Security-)?[^\/]+$/, "/\$1asterisk")
						checkout scm: [$class: 'GitSCM',
							branches: [[name: "${BRANCH_NAME}"]],
							extensions: [
								[$class: 'RelativeTargetDirectory', relativeTargetDir: astDir],
								[$class: 'CloneOption',
									noTags: true,
									depth: 10,
									honorRefspec: true,
									shallow: true
								],
							],
							userRemoteConfigs: [[name: env.GERRIT_NAME, url: asteriskUrl]]
						]

						stage ('Build') {
							echo 'Building..'

							sh """
								cd ${astDir}
								./tests/CI/buildAsterisk.sh --output-dir=${env.WORKSPACE}/${outputDir} --cache-dir=/srv/cache
								sudo ./tests/CI/installAsterisk.sh --user-group=jenkins:users
							"""
						}
						stage ('Test') {
							sh "./self_test"
						}
					}
				}
			}
		}
	}
	post {
		cleanup {
			sh "sudo make distclean 2&>/dev/null || : "
			sh "sudo rm -rf CI/output 2&>/dev/null || : "
		}
		/*
		 * The Gerrit Trigger will automatically post the "Verified" results back
		 * to Gerrit but the verification publisher publishes extra stuff in the
		 * "Code Review" section of the review.
		 */
		always {
			script {
				def cat
				def comment
				def rvalue
				switch (currentBuild.currentResult) {
					case ~/^SUCCESS$/:
						cat = "Passed"
						comment = ""
						rvalue = 1
						break
					case ~/^FAILURE$/:
						cat = "Failed"
						comment = "Fatal Error"
						rvalue = -1
						break
					case ~/^UNSTABLE$/:
						cat = "Failed"
						comment = "Tests Failed"
						rvalue = -1
						break
				}

				gerritverificationpublisher verifyStatusValue: rvalue,
					verifyStatusCategory: cat, verifyStatusURL: '',
					verifyStatusComment: comment, verifyStatusName: '',
					verifyStatusReporter: 'Jenkins2', verifyStatusRerun: 'regate'
			}
		}
		success {
			echo "Reporting ${currentBuild.currentResult} Passed"
		}
		failure {
			echo "Reporting ${currentBuild.currentResult}: Failed: Fatal Error"
		}
		unstable {
			echo "Reporting ${currentBuild.currentResult}: Failed: Tests Failed"
		}
	}
}
